version: "3"
# net stop hns
# net start hns
services:
  db:
    image: mariadb:10
    ports:
      - "3306:3306"
    volumes:
      - ./docker-vol/db/conf.d:/etc/mysql/conf.d
      - ./docker-vol/db/data:/var/lib/mysql
      - ./docker-vol/db/initdb.d:/docker-entrypoint-initdb.d
    env_file: ./docker-vol/db/.env
    environment:
      TZ: Asia/Seoul
    # networks:
    # - backend
    restart: always
  influxdb:
    image: influxdb:2.4-alpine
    volumes:
      # Mount for influxdb data directory and configuration
      - .\docker-vol\influxdb2\data:/var/lib/influxdb2:rw
      - .\docker-vol\influxdb2\config:/etc/influxdb2:rw
    ports:
      - "8086:8086"
    restart: always

  # Use the influx cli to set up an influxdb instance.
  influxdb_cli:
    links:
      - influxdb
    image: influxdb:2.4-alpine
    # volumes:
    # Mount for influxdb data directory and configuration
    # - .\docker-vol\influxdb2\data:/var/lib/influxdb2:rw
    # - ..\dev\docker\viewerlock\entrypoint.sh:/entrypoint.sh:rw
    # - ./ssl/influxdb-selfsigned.crt:/etc/ssl/influxdb-selfsigned.crt:rw
    # - ./ssl/influxdb-selfsigned.key:/etc/ssl/influxdb-selfsigned.key:rw
    environment:
      # Use these same configurations parameters in your telegraf configuration, mytelegraf.conf.
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=shbaek
      - DOCKER_INFLUXDB_INIT_PASSWORD=tmdghkqor0
      - DOCKER_INFLUXDB_INIT_ORG=cn
      - DOCKER_INFLUXDB_INIT_BUCKET=mybucket
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=mytoken
      # - INFLUXDB_HTTP_AUTH_ENABLED=false
      # - INFLUXD_TLS_CERT=/etc/ssl/influxdb-selfsigned.crt
      # - INFLUXD_TLS_KEY=/etc/ssl/influxdb-selfsigned.key
    entrypoint: influx setup --bucket mybucket -t mytoken -o cn --username=shbaek --password=tmdghkqor0 --host=http://host.docker.internal:8086 -f
    # entrypoint: influx setup --bucket mybucket -t mytoken -o cn --username=shbaek --password=tmdghkqor0 --host=http://viewerlock_influxdb_1:8086 -f
    restart: on-failure:10
    depends_on:
      - influxdb

  grafana:
    image: grafana/grafana
    links:
      - influxdb
    volumes:
      - .\docker-vol\grafana\grafana.ini:/etc/grafana/grafana.ini:rw
      # /var/lib/grafana/grafana.db => API-KEY 저장됨.
      - .\docker-vol\grafana\data:/var/lib/grafana:rw
      - .\docker-vol\grafana\provisioning:/etc/grafana/provisioning:rw
      # - .\docker-vol\grafana\admin_password:/run/secrets/admin_password
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=shbaek
      - GF_SECURITY_ADMIN_PASSWORD=tmdghkqor0
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: always
    depends_on:
      - influxdb_cli

  mosquitto:
    image: eclipse-mosquitto
    links:
      - influxdb
    ports:
      - "1883:1883"
    # 일단 auth 옵션은 끈 상태로 진행
    # mosquitto_passwd -c /password_file shbaek => 패스워드 파일 생성
    # 생성된 password_file 컨테이너에 마운트
    # /mosquitto/config/mosquitto.conf에 password_file 설정
    entrypoint: mosquitto -c /mosquitto-no-auth.conf
    restart: always
    depends_on:
      - grafana

  telegraf:
    image: telegraf:1.24-alpine
    links:
      - influxdb
    volumes:
      #  Sync timezone with host
      # - /etc/localtime:/etc/localtime:ro
      # Mount for telegraf config
      - .\docker-vol\telegraf\telegraf.conf:/etc/telegraf/telegraf.conf:rw
      - .\docker-vol\telegraf\rootca.crt:/etc/telegraf/rootca.crt:rw
      # - .\docker-vol\telegraf\test_shape.conf:/etc/telegraf/telegraf.d/test_shape.conf:rw
      # - .\docker-vol\telegraf\test_leak.conf:/etc/telegraf/telegraf.d/test_leak.conf:rw
      # - .\docker-vol\telegraf\test_assem.conf:/etc/telegraf/telegraf.d/test_assem.conf:rw
      # - /var/run/docker.sock:/var/run/docker.sock
    # env_file:
    #   - ./viewerlock.env
    environment:
      - DOCKER_INFLUXDB_INIT_URLS=http://host.docker.internal:8086
      # - DOCKER_INFLUXDB_INIT_URLS=http://viewerlock_influxdb_1:8086
      - DOCKER_INFLUXDB_INIT_ORG=cn
      - DOCKER_INFLUXDB_INIT_BUCKET=mybucket
      - DOCKER_INFLUXDB_INIT_BUCKET_SHAPE=vl_shape
      - DOCKER_INFLUXDB_INIT_BUCKET_LEAK=vl_leak
      - DOCKER_INFLUXDB_INIT_BUCKET_ASSEM=vl_assem
      - DOCKER_INFLUXDB_INIT_BUCKET_TEST_SHAPE=test_shape
      - DOCKER_INFLUXDB_INIT_BUCKET_TEST_LEAK=test_leak
      - DOCKER_INFLUXDB_INIT_BUCKET_TEST_ASSEM=test_assem
      #
      - DOCKER_INFLUXDB_INIT_BUCKET_CN_SHAPE=cn_vl_shape
      - DOCKER_INFLUXDB_INIT_BUCKET_CN_LEAK=cn_vl_leak
      - DOCKER_INFLUXDB_INIT_BUCKET_CN_ASSEM=cn_vl_assem
      #
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=mytoken
      - DOCKER_GRAFANA_WS_INIT_URL=ws://host.docker.internal:3000/api/live/push/custom_stream_id
      # - DOCKER_GRAFANA_WS_INIT_URL=ws://viewerlock_grafana_1:3000/api/live/push/custom_stream_id
      # - DOCKER_GRAFANA_INIT_API_KEY=
      - DOCKER_MQTT_INIT_SERVER=tcp://host.docker.internal:1883
      - DOCKER_MQTT_INIT_SERVER_IJOON=mqtt://123.142.5.131:21984
      # - DOCKER_MQTT_INIT_SERVER=tcp://viewerlock_mosquitto_1:1883
    restart: always
    depends_on:
      - mosquitto

  cn-gs-test:
    container_name: "cn-gs-test"
    restart: always
    build:
      context: ./cn-gs-test
      dockerfile: Dockerfile
    # volumes:
    # hot reload를 위해 mount
    # - "./cn-gs-test:/usr/src/testapp"
    # - "/usr/src/testapp/node_modules"
    # - "/usr/src/testapp/.testapp"
    ports:
      - "8070:8070"
    depends_on:
      - db

  cn-viewerlock:
    container_name: "cn-viewerlock"
    restart: "always"
    build:
      context: ./cn-viewerlock
      dockerfile: Dockerfile
    #   # hot reload를 위해 mount
    # volumes:
    #   - "./cn-viewerlock:/usr/src/viewerlock"
    #   - "/usr/src/viewerlock/node_modules"
    #   - "/usr/src/viewerlock/.viewerlock"
    ports:
      - "8080:8080"
    depends_on:
      - "cn-gs-test"

  rtsp_simple_server:
    image: aler9/rtsp-simple-server
    # network_mode: "host"
    links:
      - influxdb
    ports:
      - "8554:8554"
      - "8888:8888"
    volumes:
      - .\docker-vol\rtsp-simple-server\rtsp-simple-server.yml:/rtsp-simple-server.yml:rw
    environment:
      - RTSP_PROTOCOLS=tcp
    restart: always

  ffmpeg_leak:
    image: jrottenberg/ffmpeg:latest
    links:
      - influxdb
    command: -rtsp_transport tcp -i rtsp://service:service@112.223.210.220:13554/video?inst=2 -c copy -an -f rtsp rtsp://host.docker.internal:8554/leak
    # command: -rtsp_transport tcp -i rtsp://admin:admin@112.223.210.220:13554/profile0 -pix_fmt yuv420p -c:v libx264 -vf scale=420:240 -an -f rtsp rtsp://host.docker.internal:8554/leak
    # command: -rtsp_transport tcp -i rtsp://admin:admin@112.223.210.220:13554/profile0 -filter:v fps=fps=3 -update 1 /images/leak.jpg -y
    # volumes:
    #   - .\docker-vol\ffmpeg\images:/images:rw
    restart: always
    depends_on:
      - rtsp_simple_server

  ffmpeg_shape:
    image: jrottenberg/ffmpeg:latest
    links:
      - influxdb
    command: -rtsp_transport tcp -i rtsp://admin:admin@112.223.210.220:23554/profile1 -c copy -an -f rtsp rtsp://host.docker.internal:8554/shape
    # command: -rtsp_transport tcp -i rtsp://admin:admin@112.223.210.220:23554/profile0 -pix_fmt yuv420p -c:v libx264 -vf scale=210:120 -an -f rtsp rtsp://host.docker.internal:8554/shape
    # command: -rtsp_transport tcp -i rtsp://admin:admin@112.223.210.220:23554/profile0 -filter:v fps=fps=3 -update 1 /images/shape.jpg -y
    # volumes:
    # - .\docker-vol\ffmpeg\images:/images:rw
    restart: always
    depends_on:
      - rtsp_simple_server

  ffmpeg_assemble:
    image: jrottenberg/ffmpeg:latest
    links:
      - influxdb
    command: -rtsp_transport tcp -i rtsp://admin:admin@112.223.210.220:33554/profile1 -c copy -an -f rtsp rtsp://host.docker.internal:8554/assemble
    # command: -rtsp_transport tcp -i rtsp://admin:admin@112.223.210.220:33554/profile0 -pix_fmt yuv420p -c:v libx264 -vf scale=210:120 -an -f rtsp rtsp://host.docker.internal:8554/assemble
    # command: -rtsp_transport tcp -i rtsp://admin:admin@112.223.210.220:33554/profile0 -filter:v fps=fps=3 -update 1 /images/assemble.jpg -y
    # volumes:
    #   - .\docker-vol\ffmpeg\images:/images:rw
    restart: always
    depends_on:
      - rtsp_simple_server
# volumes:
#   influxdb2:
